"""
This isn't ideal.
This doesn't fully complete the challenge.
This doesn't take input.
This doesn't generate random phrases.
This doesn't generate more than 2 words.
This is perfect.
This is peak performance.
"""

import string

def get_space():
    gen1 = (x for x in string.printable)
    next(gen1)
    next(gen1)
    next(gen1)

    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    next(gen1)
    return next(gen1)

def nothing():
    return

def empty_string():
    return next((x for x in string.printable.split(next((x for x in string.printable)))))

gen1 = (x for x in string.ascii_uppercase)
next(gen1)
next(gen1)
next(gen1)
next(gen1)
next(gen1)
next(gen1)
next(gen1)
print(next(gen1), end=empty_string())

gen2 = (x for x in string.ascii_uppercase)
next(gen2)
next(gen2)
next(gen2)
next(gen2)
print(next(gen2), end=empty_string())

gen3 = (x for x in string.ascii_uppercase)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
l = next(gen3)
print(l, end=empty_string())
print(l, end=empty_string())
# reuse it because why the heck not

next(gen3)
next(gen3)
o = next(gen3)
print(o, end=empty_string())

print(get_space(), end=empty_string())

next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
next(gen3)
print(next(gen3), end=empty_string())

print(o, end=empty_string())

gen4 = (x for x in string.ascii_uppercase)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
next(gen4)
print(next(gen4), end=empty_string())

print(l, end=empty_string())

gen5 = (x for x in string.ascii_uppercase)
next(gen5)
next(gen5)
next(gen5)
print(next(gen5))
